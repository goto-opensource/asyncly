name: Continuous Integration
on: [push, pull_request]

jobs:
  cmake:
    name: CMake ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-22.04, windows-2019]
        include:
          - os: macOS-12
            triplet: x64-osx
          - os: ubuntu-22.04
            triplet: x64-linux
          - os: windows-2019
            triplet: x64-windows

    steps:
      - uses: actions/checkout@main

      - name: Mount vcpkg cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/vcpkg/archives"
          key: vcpkg-${{ matrix.os }}-${{ matrix.triplet }}

      - name: Install vcpkg dependencies
        run: vcpkg install --triplet=${{ matrix.triplet }} benchmark function2 gtest prometheus-cpp boost-asio boost-callable-traits boost-hana boost-mp11

      - name: Install ninja on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y ninja-build

      - name: Install ninja on macOS
        if: runner.os == 'macOS'
        run: brew install ninja

      - name: "Configure for Unix with vcpkg dependencies"
        if: runner.os != 'Windows'
        run: cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_install "-DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_DEBUG_POSTFIX=_d -DCMAKE_CONFIGURATION_TYPES='Release;Debug' -G"Ninja Multi-Config" -S ${{ github.workspace }} -B ${{ github.workspace }}/_build

      - name: "Configure for Windows with vcpkg dependencies"
        if: runner.os == 'Windows'
        run: cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/_install "-DCMAKE_TOOLCHAIN_FILE=${Env:VCPKG_INSTALLATION_ROOT}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_DEBUG_POSTFIX=_d -S ${{ github.workspace }} -B ${{ github.workspace }}/_build

      - name: "Build Debug"
        run: cmake --build ${{ github.workspace }}/_build --config Debug

      - name: "Build Release"
        run: cmake --build ${{ github.workspace }}/_build --config Release

      - name: "Test Debug"
        run: ctest -C Debug -V
        working-directory: "${{ github.workspace }}/_build"

      - name: "Test Release"
        run: ctest -C Release -V
        working-directory: "${{ github.workspace }}/_build"

      - name: "Install Debug"
        run: cmake --install ${{ github.workspace }}/_build --config Debug

      - name: "Install Release"
        run: cmake --install ${{ github.workspace }}/_build --config Release

  bazel:
    name: Bazel ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
        include:
          - os: macOS-latest
            bazel_args: "--cxxopt=-std=c++20"
          - os: ubuntu-latest
            bazel_args: "--cxxopt=-std=c++20"
          - os: windows-latest
            bazel_args: "--cxxopt=/std:c++20 --cxxopt=/Zc:__cplusplus"

    steps:
      - uses: actions/checkout@main

      - name: "Build and test asyncly"
        run: bazel test ${{ matrix.bazel_args }} --test_output=all //...

      - name: "Run asyncly benchmark"
        run: bazel run ${{ matrix.bazel_args }} -c opt //Test/Performance/...
